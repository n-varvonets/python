"""Почему функции являются полноправными объектами, а значит:
могут быть связаны с переменной;
могут быть определены одна внутри другой."""

"""Пример декоратора:"""
def makebold(fn):
    def wrapped():
        return "<b>" + fn() + "</b>"
    return wrapped

def makeitalic(fn):
    def wrapped():
        return "<i>" + fn() + "</i>"
    return wrapped

@makebold
@makeitalic
def hello():
    return "hello habr"

print(hello())  ## выведет <b><i>hello habr</i></b>
print('--------------------------------------')

"""следует осознать, что в Python'е функции — это тоже объекты, а значит(они имеет 2 свйоства):
1)могут быть связаны с переменной;"""
def shout(word="да"):
    return word.capitalize() + "!"

print(shout())  # выведет: 'Да!'

scream = shout  # Так как функция - это объект, мы можем связать её с переменнной, как и любой другой объект

# Заметьте, что мы не используем скобок: мы НЕ вызываем функцию "shout",
# мы связываем её с переменной "scream". Это означает, что теперь мы можем вызывать "shout" через "scream":
print(scream())  # выведет: 'Да!'  # (что и shout())

# Более того, это значит, что мы можем удалить "shout", и функция всё ещё
# будет доступна через переменную "scream"

del shout
try:
    print(shout())
except NameError as e:
    print(e)

print(scream())
print('--------------------------------------')

"""2)могут быть определены одна внутри другой."""
def getTalk(type="shout"):
    # Мы определяем функции прямо здесь
    def shout(word="да"):
        return word.capitalize() + "!"

    def whisper(word="да"):
        return word.lower() + "..."

    # Затем возвращаем необходимую
    if type == "shout":
        # Заметьте, что мы НЕ используем "()", нам нужно не вызвать функцию,
        # а вернуть объект функции  # это и делает декортор - декоратором
        return shout
    else:
        return whisper

# Как использовать это непонятное нечто?
# Возьмём функцию и свяжем её с переменной
talk = getTalk()

# Как мы можем видеть, "talk" теперь - объект "function":
print(talk)  # выведет: <function shout at 0xb7ea817c>

# Который можно вызывать, как и функцию, определённую "обычным образом":
print(talk())  # выведет: Да!

# Если нам захочется - можно вызвать её напрямую из возвращаемого значения:
print(getTalk("whisper")())  # выведет: да...
