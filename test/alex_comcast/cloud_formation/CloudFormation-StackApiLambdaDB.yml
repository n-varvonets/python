AWSTemplateFormatVersion: 2010-09-09

Parameters:
  LambdaFuncName:
    Type: String
    Default: crud-l-users
  DynamoDBTableName:
    Type: String
    Default: users
  APIName:
    Type: String
    Default: user_api-lambda-db
  EnvironmentName:
    Type: String
    AllowedValues:
      - Dev
      - Test
      - Prod

Resources:
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: user-item-lambda-bucket
        S3Key: 3_crud_list_user_items_lambda.py.zip
      FunctionName:  # ref to param
        Ref: LambdaFuncName
      Handler: 3_crud_list_user_items_lambda.lambda_handler
      Runtime: python3.9
      Timeout: 30
      Role: !GetAtt IAMRole.Arn   # below we have a resource IAMRole after creating we will get his arn. Do we invoke it?
    DependsOn:
      - DynamoDBTable
  DynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName:
        Ref: DynamoDBTableName
      AttributeDefinitions:
        - AttributeName: ID
          AttributeType: S
      KeySchema:
        - AttributeName: ID
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
    DependsOn:
      - IAMRole
  APIGatewayRestAPI:
    # создаем сам апи, как рест апи
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name:
        Ref: APIName
    DependsOn:
      - LambdaFunction
  APIGatewayResource:
    # теперь созданному апи назначем ресурс(нашу таблицу реста)
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      # надо указать имя к которому привязьіваем таблицу as url: users/
      RestApiId: !Ref APIGatewayRestAPI
      ParentId: !GetAtt
        - APIGatewayRestAPI  # указьіваю имя ресурса - APIGatewayResource
        - RootResourceId
      PathPart: "users"
    DependsOn:
      - APIGatewayRestAPI
  UsersGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: "GET"
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref APIGatewayResource
      AuthorizationType: "NONE"
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
          - LambdaFuncNameArn: !GetAtt LambdaFunction.Arn
  UsersPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: "POST"
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref APIGatewayResource
      AuthorizationType: "NONE"
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
          - LambdaFuncNameArn: !GetAtt LambdaFunction.Arn
  UsersPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: "PUT"
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref APIGatewayResource
      AuthorizationType: "NONE"
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
          - LambdaFuncNameArn: !GetAtt LambdaFunction.Arn
  UsersDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: "DELETE"
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref APIGatewayResource
      AuthorizationType: "NONE"
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
          - LambdaFuncNameArn: !GetAtt LambdaFunction.Arn
  APIGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      StageName:
        Ref: EnvironmentName
    DependsOn:
      - UsersPostMethod
      - UsersPostMethod
      - UsersPutMethod
      - UsersDeleteMethod
  APIGatewayPermission:
    # даем rest-api разрешение на вьізов lambda func
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
    DependsOn:
      - APIGatewayDeployment
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          # делаем утверждение, что єто роль может использоваться только к сервису lambda func
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              # when lambda func will be executed -  , то подставляем єту роль с ниже полтикой доступа
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: Policy_api-lambda-db
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:TagResource'
                  - 'dynamodb:UntagResource'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                Resource: '*'
