AWSTemplateFormatVersion: 2010-09-09

Parameters:
  LambdaFuncName:
    Type: String
    Default: crud-l-users
  SNSFuncName:
    Type: String
    Default: sns-lambda-func
  DynamoDBTableName:
    Type: String
    Default: users
  APIName:
    Type: String
    Default: user_api-lambda-db
  EnvironmentName:
    Type: String
    Default: prod
  DNSHostedZoneId:
    Type: String
    Default: Z07116451MHGEO5I52MAQ
  DNSHostedZoneName:
    Type: String
    Default: bumblee-nick.net
  MYAPIDomainName:
    Type: String
#    Default: users-api.bumblee-nick.net
    Default: bumblee-nick.net

#    AllowedValues:
#      - Dev
#      - Test
#      - Prod

# sam deploy --template-file CloudFormation-StackApiLambdaDB.yml --stack-name crud-rest-sns-dynanamodb-stack --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM

Resources:
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: user-item-lambda-bucket
        S3Key: 3_crud_list_user_items_lambda.py.zip
      FunctionName:  # ref to param
        Ref: LambdaFuncName
      Handler: 3_crud_list_user_items_lambda.lambda_handler
      Runtime: python3.9
      Timeout: 30
      Role: !GetAtt IAMRole.Arn   # below we have a resource IAMRole after creating we will get his arn.
    DependsOn:
      - DynamoDBTable

  SNSTopicFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: # ref to param
        Ref: SNSFuncName
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: user-item-lambda-bucket
        S3Key: 3_sns.py.zip
      Handler: 3_sns.lambda_handler
      Runtime: python3.9
      Timeout: 30
#      iamRoleStatements:
#        - Effect: "Allow"
#          Action:
#            - "lambda:InvokeFunction"
#            - "sns:Publish"
#          Resource: !GetAtt MyTopic.Arn
    DependsOn:
      - MySubscription

  DynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName:
        Ref: DynamoDBTableName
      AttributeDefinitions:
        - AttributeName: ID
          AttributeType: S
      KeySchema:
        - AttributeName: ID
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
    DependsOn:
      - IAMRole

  APIGatewayRestAPI:
    # создаем сам апи, как RestApi
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Ref: APIName
    DependsOn:
      - LambdaFunction
#      - SNSTopicFunction

  APIGatewayResource:
    # теперь созданному апи назначем ресурс(нашу таблицу реста as url: users/)
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ParentId: !GetAtt APIGatewayRestAPI.RootResourceId
      PathPart: !Ref DynamoDBTableName
    DependsOn:
      - APIGatewayRestAPI

  APIGatewayResourceID:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ParentId: !GetAtt APIGatewayResource.ResourceId
      PathPart: "{id}"
    DependsOn:
      - APIGatewayRestAPI

  APIGatewaySNSResource:
    # route для sns как ресурс
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ParentId: !GetAtt APIGatewayRestAPI.RootResourceId
      PathPart: "sent_user_sns"
    DependsOn:
      - APIGatewayRestAPI

  APIGatewaySNSResourceID:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ParentId: !GetAtt APIGatewaySNSResource.ResourceId
      PathPart: "{id}"
    DependsOn:
      - APIGatewayRestAPI

  MyTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "SNS-users-topic"  # warn: без пробелов
    DependsOn:
      - IAMRole

  MySubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref MyTopic
      Endpoint: "nickolay.varvonets@gmail.com"
      #      Endpoint: !Join [ ",", [ "nickolay.varvonets@gmail.com", "avarvonets@gmail.com"] ]  # может принять только тип str
    DependsOn:
      - MyTopic

  GetListUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref APIGatewayResource
      AuthorizationType: NONE
      Integration:
        # POST в качестве значения IntegrationHttpMethod для метода GET API Gateway, чтобы интегрировать его с Lambda-функцией.
        # иначе при вьізове єтих методов просто не будет вьізваться lambda func
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        # При использовании типа интеграции AWS_PROXY , весь запрос, включая заголовки и тело запроса, будет передан в
        # вашу Lambda функцию, и вы сможете полностью управлять процессом обработки запроса внутри функции.

        # Тип интеграции AWS используется для интеграции с другими AWS сервисами, такими как AWS Elastic Beanstalk,
        # AWS EC2 и другими. При использовании этого типа интеграции вы можете настроить запрос и ответ, используя модель данных,
        # определенную внутри вашего API Gateway,
        Uri: !Sub
          - >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
          - LambdaFuncNameArn: !GetAtt LambdaFunction.Arn

  CreateNewUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref APIGatewayResource
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
          - LambdaFuncNameArn: !GetAtt LambdaFunction.Arn

  GetUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref APIGatewayResourceID
      AuthorizationType: NONE
      # method.request используется для указания параметров, которые API Gateway должен получить от клиента и передать
      # в вашу Lambda функцию, а integration.request - для указания параметров, которые API Gateway должен передать
      # в интеграцию HTTP после получения запроса от клиента.
      RequestParameters:
        method.request.path.id: true
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
          - LambdaFuncNameArn: !GetAtt LambdaFunction.Arn


  UpdateUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: PUT
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref APIGatewayResourceID
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.id: true
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
          - LambdaFuncNameArn: !GetAtt LambdaFunction.Arn

  DeleteUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: DELETE
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref APIGatewayResourceID
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.id: true
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
          - LambdaFuncNameArn: !GetAtt LambdaFunction.Arn

  SNSUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref APIGatewaySNSResourceID
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.id: true
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SNSTopicFuncNameArn}/invocations
          - SNSTopicFuncNameArn: !GetAtt SNSTopicFunction.Arn

  MyLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt SNSTopicFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGatewayRestAPI}/*/GET/sent_user_sns/{id}

    DependsOn:
      - SNSTopicFunction

  APIGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      StageName: !Ref EnvironmentName
    DependsOn:
      - GetListUserMethod
      - GetUserMethod
      - CreateNewUserMethod
      - UpdateUserMethod
      - DeleteUserMethod
      - SNSUserMethod

  APIGatewayPermission:
    # даем rest-api разрешение на вьізов lambda func
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
    DependsOn:
      - APIGatewayDeployment

  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: Policy_api-crud-sns-db
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:TagResource'
                  - 'dynamodb:UntagResource'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource: '*'
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: '*'

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: lambda-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'


# --------------------------------------------------------------

  ApiGatewayDomainName:
    #  соединим соедение между именем домена с сертификатом
    Type: AWS::ApiGateway::DomainName
    Properties:
      # Если вы используете кастомный домен и хотите настроить HTTPS, вы должны указать свойство CertificateArn.
      # Если вы используете региональный API Gateway, вы можете использовать свойство RegionalCertificateArn для настройки HTTPS.
      # Если вы хотите настроить HTTPS для кастомного домена и регионального API Gateway, вам необходимо указать оба свойства.

      # Если вы планируете использовать AWS::ApiGateway::DomainName с REGIONAL типом конфигурации, вам не нужно указывать CertificateArn,
      # так как региональные сертификаты используются по умолчанию. Вам нужно только указать RegionalCertificateArn в качестве ARN вашего сертификата.
      # CertificateArn: !Ref AwsAcmCertificate
      RegionalCertificateArn: !Ref AwsAcmCertificate
      # проде нужно обратиться к arn только что созданного сертификата(возможно только по его имени будет достатточно)
      #  arn:aws:acm:ca-central-1:140294923654:certificate/0f25076f-cab2-4f58-8fc0-f79904fd9b6e
      # а имя я сам задвал в сертификате: DomainName: !Ref MYAPIDomainName # bumblee-nick.net

      DomainName: !Ref MYAPIDomainName  # bumblee-nick.net
      EndpointConfiguration:
        Types:
          # REGIONAL используется почти всегда, кроме кеширования в CloudFront
          - REGIONAL
      SecurityPolicy: TLS_1_2

      # по итогу должньі получить такую запись: API Gateway domain name
      # d-57z2zism35.execute-api.ca-central-1.amazonaws.com

    DependsOn:
      - AwsAcmCertificate


  AwsAcmCertificate:
    # нужно создать сертификат и потом прикрепить его имени домена как алиас на зашифровку данних
    Type: AWS::CertificateManager::Certificate
    Properties:
      # Отличие между DomainName и SubjectAlternativeNames заключается в том, что DomainName определяет основное доменное имя,
      # которое должно быть включено в сертификат, в то время как SubjectAlternativeNames позволяют добавлять дополнительные
      # доменные имена в сертификат. DomainValidationOptions в свою очередь используется для проверки владения доменными именами,
      # указанными в DomainName и SubjectAlternativeNames.


      # возомжно стоит добавить регион сюда(мол где создать сертификат)

      DomainName: !Ref MYAPIDomainName # bumblee-nick.net должен бьіть по примеру через ui (без субдомена)
      DomainValidationOptions:
#         required. Он содержит информацию о доменных именах, для которых необходимо провести проверку владения перед выдачей сертификата.
        - DomainName: !Ref MYAPIDomainName
          HostedZoneId: !Ref DNSHostedZoneId
#        SubjectAlternativeNames:
#          - "*.bumblee-nick.net"
      ValidationMethod: DNS  # для того типа валидациции нужно создать запись(рекорд) в route53

      # по итогу должньі получить такую запись: ACM certificate ARN
      #arn:aws:acm:ca-central-1:140294923654:certificate/0f25076f-cab2-4f58-8fc0-f79904fd9b6e
  DNSRecordSetGroup:
    Type: AWS::Route53::RecordSet
    Properties:
      # HostedZoneName: example.com.
      # Name: myrecord.example.com.
      HostedZoneName: bumblee-nick.net.
      Name: "*.bumblee-nick.net."
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt ApiGatewayDomainName.RegionalHostedZoneId # а здесь указьіваем id домененного имени(только что создали)
        DNSName: !GetAtt ApiGatewayDomainName.RegionalDomainName
    DependsOn:
      - ApiGatewayDomainName

#  DNSRecordSetGroup:
#    Type: AWS::Route53::RecordSetGroup
#    Properties:
#      HostedZoneId: !Ref DNSHostedZoneId
#      RecordSets:
#
#        - Name: !Join [ "", [ !Ref "AwsAcmCertificate", ".", !Ref "MYAPIDomainName", "." ] ]
#          # бьівает подтверждение через mail, где єто все автоматом, а есть ерез днс(для єтого нужно сделать запись(record) в Route53,
#          # где ися домен будет ссьілаться на сертифат только что созданньій)
#
#          # первая запись - мьі говорим aws API gateway что у него шифрока по такому сиртификату
#          #   - т.е. привзьіваем <имя_сертификата>+<api_domian> = <value_certificate>
#          #   - т.е. нужно добавить CNAME record(name(_32adfg.test.example.com) and his value(_123,asdasdas,acm-validations,aws,)) в роут53
#          # - CNAME name:  _46c61374ad0d5b24f571e669eedaa335.bumblee-nick.net.
#          Type: CNAME
#          TTL: 300
#          ResourceRecords:
#            # CNAME value _ff320c4647c75fd78fbd4928f895223c.gtlqmkpmvp.acm-validations.aws.
#            - !Select [ 0, !Split [ ".", !Select [ 1, !Split [ "/", !Ref AwsAcmCertificate ] ] ] ]
#            # зачем нужньі рекордсетьі? для того что бьі обьеденять созданньій доменн(его алисасьі) с сертификатом
#            # https://ibb.co/LR60wNZ
#            # https://ibb.co/LR60wNZ
#            # HostedZoneId : Z8VLZEXAMPLE
#            #      Name: test.example.com
#            #      ResourceRecords:
#            #       - 192.0.2.99
#
#          # AS RESULT: new record:
#          #     Record name: _46c61374ad0d5b24f571e669eedaa335.bumblee-nick.net
#          #     Value/Route traffic to: _ff320c4647c75fd78fbd4928f895223c.gtlqmkpmvp.acm-validations.aws.
#          #     type: CNAME

#        - Name: users-api.bumblee-nick.net
#        - Name: *.bumblee-nick.net
#        - Name: bumblee-nick.net
#          # создадаим запись в route53, что бьі dns знал куда перекидьівать травфик
#
#          # т.е. должньі соеденить API Gateway domain name с Domain name, где
#          # Domain name = bumblee-nick.net
#          # API Gateway domain name = d-57z2zism35.execute-api.ca-central-1.amazonaws.com
#
#
#          Type: A  # для API GATEWAY conetction with custom domain we need a record by type A
#          AliasTarget:
#
#            # 1. select API Gateway as resource
#            # 2. select a region ca-central-1
#            # 3. select API Gateway domain name = d-57z2zism35.execute-api.ca-central-1.amazonaws.com
#            # 4. указать: routing policy - Simple routing
#
##            DNSName: !Ref ApiGatewayDomain
#            DNSName: !GetAtt ApiGatewayDomainName.RegionalDomainName
#            EvaluateTargetHealth: false
#          # AS RESULT: new record:
#          #     Record name: bumblee-nick.net
#          #     Value/Route traffic to: d-57z2zism35.execute-api.ca-central-1.amazonaws.com
#          #     type: A
#
#    DependsOn:
#      - ApiGatewayDomainName

#  ApiGatewayBasePathMapping: # last step for dns and ssl
#    # теперь должньі соеденить только что созданньіе API Gateway domain name с созданньіми апи, где
#    # API Gateway domain name = d-57z2zism35.execute-api.ca-central-1.amazonaws.com
#
#    # + нужно в route53 в recordests создать соотвеущую запись
#    Type: AWS::ApiGateway::BasePathMapping
#    Properties:
##      DomainName: !Ref ApiGatewayDomainName  # подставляем наш ресурс (имя dns)
#      DomainName: !GetAtt ApiGatewayDomainName.RegionalDomainName  # подставляем наш ресурс (имя dns)
#      RestApiId: !Ref APIGatewayRestAPI
#      Stage: !Ref EnvironmentName  # Prod (нужно указьівать если указьіваем в апи)
##      Path: not required - onl if we go ahead by url resource (/users)
#    DependsOn:
#      - ApiGatewayDomainName
#
Outputs:
  AwsAcmCertificate:
    Value: !Ref AwsAcmCertificate
    Description: ahaha AwsAcmCertificate
  ApiGatewayDomainName:
    Value: !GetAtt ApiGatewayDomainName.RegionalDomainName
    Description: The domain name for REGIONAL the API Gateway
  ApiGatewayDomainHostedZoneId:
    Value: !GetAtt ApiGatewayDomainName.RegionalHostedZoneId
    Description: The domain HostedZoneId for REGIONAL the API Gateway
