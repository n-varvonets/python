https://drive.google.com/file/d/1z9mvTljmNIcei6D19xJmzUC4RjF6qXnj/view?usp=sharing

1.1.)Интерпритатор - прослойка между кодом и оборудьіваниемна котором воспроизводится программа
1.2.)Кампилятор перед запуком проверяет код на:
    - типов данньіх,
    - синтасис: скобки, отсупьі
    - математические вьічисления: 1 / 0
И если случается что-то нехорошое, то он даже не начинает преобразование в машинньій байт-код.
1.3)байт-код - независимая от платвормьі низкоуровневая запись программьі
1.4)Зачем __pycache__ ? Кампиялтор видит что кодовая база не менялась, то при запуске, он сразу отправяет его
виртуальной машине без тратьі времени на преобразование кода в байт напрямую

2.1)Несмотря на то что Python - язьік интерпритуруемьій, вно в составе интерпретатора есть компилятор, НО ...
обрезанньій по функцилналу:
    - проверяет ТОЛЬКО синтаксиеские косяки: скобки, отсупьі и т.д.
    - НЕ проверяет математические косяки и типизацию
2.2)flow: Запуск программьі
2.2.1)Мьі говорим интерпритатору - пойди запусти кодовую базу .ру и отправляет его в кампилятор.
2.2.2)Дальше кампилятор преобразует кодовую базу в байт-код
2.2.2)Дальше кампилятор складьівает байт-код в __pycache__
2.2.2)Дальше байт-код общается непосредственно с железом и вьіполняется им же

3.1.а)Кейс 1: математическую и типизированную ошибку - питоновский кампилятор скушает, станет преобразовьівать данньіе
в байт командьі и начнет его вьіполнение. В момент ошибки типа или математики, питоновский кампилятор обработает его и
вернет обратно ошибку в терминал
print(123)
1 / 0
3.1.б) Результат: стек трейс сначала принтанет 123, а потом прокинет в терминал ошибку
3.2.а)Кейс 2: синтаксическую - кампилятор сразу кинет ошибку и не станет даже преобразовьівать код в байт
print(123)
a = a s
3.2.б) Результат: в стек трейсе только ошибка без отпринтованнного 123
