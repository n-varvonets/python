"""Что такое процесс"""
# процесс - еденица вьіполнения программьі. Пример:
#       1. запустили редактор питона - один процесс.
#       2. запустили скрипт питона - второй процесс.
#       3. запустили хром - третий процесс.

"""Многоядерные процессоры и параллелизм"""
# 1)Раньше на пентиуме С ОДНИМ ЯДРОМ - два процесса никак одновременно не могли вьіполняться, Пока полностью НЕ ВЬІПОЛНИТСЯ ОДИН ИЗ НИХ
# WARN_1: т.е. (1)НА ЕДЕНИЦУ ВРЕМЕНИ вьіполняется (2)ТОЛЬКО ОДНА ПРОГРАММА(процесс) (3)БЕЗ конкуретности

# 2)Со временем поменяли подход - КОНКУРЕНТНОСТЬ(первьіе попьітки распаралеллить процессьі)
# КОНКУРЕНТНОСТЬ - каждьій процесс получает свое кол-во КВАНТОВ(мили) времени на вьіполнений. Каждьій
# процесс(еденица программьі) КОНКУРИРУЕТ ЗА РЕСУРС ЯДРА.
# WARN_2: т.е. (1)НА ЕДЕНИЦУ ВРЕМЕНИ вьіполняется (2)ТОЛЬКО ОДНА ПРОГРАММА(процесс) (3)С конкуретности

# 3)Со временим появилось МНОГОЯДЕРНЬІЕ ПРОЦЕССОРЬІ(2+ ЯДРА) и действительно! два процесса будут вьіполняться в разніх
# ядрах процессора В ОДИН И ТОТ ЖЕ МОМЕНТ ВРЕМЕНИ.
# WARN_3: т.е. (1)НА ЕДЕНИЦУ ВРЕМЕНИ вьіполняется (2)УЖЕ ДВА ПРОЦЕССА в ДВУХ ЯДРАХ(процесс) (3)С конкуретностью

"""Параллелизм и конкурентность"""
# Параллелизм(т.е. 2+ ядра) подразумевает конкурентность. Но конкурентность не всегда подразумевает параллелизм(в случае с одним ядром).

# (два ядра - ТОЛЬКО два процесса одновременно.. если добавить третий, то он будет конкурировать с другим
# процессом в ОДНОМ ИЗ ДВУХ ЯДЕР)

"""Утилизация"""
# простьім язіком - єто  степень использования какого-либо ядра. Ядро - ресурс (CPU).
# При полной нагрузке одного из ядер (CPU 100%) - ОНО утилизировано на 100% из работьі и его НЕВОЗМОЖНО исползьовать. Решение:
#   добавить конкурентность процессов к ядру(т.е. разбить по потокам)
#   добавить еще одно ядро

"""Отличие потоков от процессов"""
# поток(thread) - живет внутри процесса. Каждьій процесс имеет хотя бьі один поток.
# Процесс - батон хлеба(неделимая еденица), поток - кол-во кусков хлеба.

# Процессьі - ресурсьі не делять, а потоки делять ресурсьі ядра процесса

"""что и когда использовать?"""
# Пример: есть  i/o задача(100500 запросов к гуглу) https://ibb.co/G5PD2w7
#       - Если CPU обработка - маленькая, а i/o задержка большая, - Threаding
#       - Если CPU обработка - большая, а i/o задержка маленькая, - multiprocessing
#       - Если CPU обработка - большая и i/o задержка большая, - multiprocessing и внутри Threаding или еще лучше внури - Async

# Случай когда CPU обработка маленькая и i/o задержка маленькая - не рассматриваем потому что и одно ядро справится.

# Проблема потока осталось с I/O задачми - осталась, но хоть и стала лучше, нежели без них с одним процессом,
# т.к. время ожидания i/o - все равно остается. Утилизация ядра - не 100%, т.е. он не заружен
# и простаеимват, а i/o - оастлись... решение- асинхронность.

"""Асинхронность"""
# Асинхронность НЕ ИМЕЕТ отношения к процессам и к потокам тоже!!  потому что..
# ПРИ АСИНХРОННОМ ВЬІПОЛНЕНИЯ программ задействется ВСЕГО ОДИН процесс и ВСЕГО ОДИН поток, НО главная идея его - LOOP...
# LOOP - петля, которая позволяет нам не ждать ответа на I/o задачи, а СРАЗУ переходить к следующей.
# Т.е. бегая как угорельій в ЦИКЛЕ и смотрим на готово ли наше собітие и если да, то отрабаотіваем, тем самьім
# пьітаеясь нангрузить ядро на 100% и сделать утилизация ядро равному 100%



