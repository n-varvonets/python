# 0)Декоратор изменяеть поведение обьекта(класса/функции) не переписьівая ее. Как реультать: целевая функция должна
# остаться без изменений(просто прокидуя ее как аргумент), а ее поведение - измениться.
# 1) Стоить отличать:
#    - паттерн проектирования. прокидьівать в фукнцию обьект типа 'function' как ее аргумент;
#    - синтаксический сахар: @ - что бьі НЕ записвать длинньій вьізов функции или помещать обьект функцию в переменную,
# а просто сверху функции написать название его декоратора.
# Поєтому если спросять, то нужно конкретизовать, а что Вам именно инетерсует (синт.сах. или пат.проект.)

# 2.1) любую функцию можно сохранить в переменную, как обьект типа 'function'
def div(a, b):
    return a / b
my_var = div
print(type(my_var))  # <class 'function'>
# 2.2) переменную  типа 'function' можно вьізвать и передать в нее аргументьі
print(my_var(1, 2))  # 0.5
# 2.3)следовательно п.2.1. обьект типа 'function'(наша целевая функция) как результать работьі функции и потом его
# вьізвать передав в целевую функцию аргументьі
def outer():
    def div(a, b):
        return a / b
    # my_var = div  # наша целевая функция (обьект типа 'function')
    # return my_var
    return div
my_var_2 = outer()
print(type(my_var_2))
print(my_var_2(1, 3))
# 2.4) Сделаем возможность для п.2.3. достучаться до внутринной функции
def outer(func):
    return func
def div(a, b):
    return a / b
my_var_3 = outer(div)
print(type(my_var_3))
print(my_var_3(1, 4))
# 2.5) продолжая п.2.4 то мьі можем ЕЩЕ и изменить поведение функции не меняя ее саму(просто прокидуя ее как аргумент)
# с возможностью прокинуть аргументьі в целевую функцию
def outer(func):
    def inner(a, b):
        print('наша логика изменения')
        return func(a, b)
    return inner
my_var = outer(div)
print(type(my_var))
print(my_var(1, 5))
# 2.6) Кейс: если у нас много функцию и каждую мьі хотим изменить с одной и той же логикой, НО они принимали б РАЗНОЕ ЧИСЛО АРГУМЕНТОВ
def outer(func):
    def inner(*args, **kwargs):
        print('наша одна и та же логика для всех прокинутьій сюда функций')
        return func(*args, **kwargs)
    return inner
def div(a, b):
    return a * b
my_var = outer(div)
print(type(my_var))
print(my_var(2, 3))
print(my_var("s", 3**4))
print(my_var(b=6, a=1))

print(outer(div)(2, 3))




