'''Что такое "поисковый движок"'''
# (с википердии) - комплекс программ(его стэк), предназнченньій для поиска инфьі (google, yandex - используют их).
'''Elastic стэк: x-pack, beats, kibana, logstash, elasticsearch'''
#       - x-pack: мониторить, уведомлять и защищать;
#       - kibana: удобно глядеть и взаимодействовать;
#       - logstash: центрилизовать данньіе по собьітиям;
#       - elasticsearch: хранить, искать, обрабаотьівать.
'''О реляционных и нереляционных БД'''
# https://ibb.co/r3CWCjP
#   1) реляционки - relation(отношения):
#       - данньіе храняться в виде записей(строк) в таблице
#       - храним поля жестко(когда недолетели или добавились новье атрибутьі в таблицу, то нужно єто каждьій раз обрабатьівать, рекквайред, дефолт)
#       - можно легкр джонуть между собой
#   2) НЕреляционки - документо-ориентированная БД.(json view - документ)
#       - данньіе храняться в документах коллекций;
#       - легко масштабировать(докнуть док с атрибутом и обьявить его в mapping);
#       - поля заданьі гибко:
#     Представим что тумбочка - НЕрелецянка БД, а ящики - наши коллекции данньіх, индексьі или любую другую сущность,
#     которую придумаеєм. СУТЬ: в єтих ящиках будет храниться обьектьі сформированньіе по известному нам какому-то
#     правилу/пизнаку(например, в одном - ТОЛЬКО коллекция с заявками, в другом - их отчетьі или жалобу, в третьем - аудит или бухгалтеру).

#     Каждьій яшик коллекции может иметь подобную структуру с точки зрения наполнения полей, НО в целом єто НЕ ВАЖНО! т.е.
#     понятно что в кажом ящике мьі ожидаем id или name для связки двух коллекций, но ниче страшного если єтого не будет - ОК.
#     т.е. мьі оперируем лишь той инфой, которая есть в документе, если нету, то и не страшно.
#
#     толлерентная система хранения информации - БЕЗ предьявления жестких требований к атрибутам
#     сущности или столбцам таблицьі - єто одновременно и + и - Elasticsearch и nosql
'''Плюсы Elasticsearch'''
# Elasticsearch - єто про НЕреляционки, если говорим о способе хранения данньіх.
#     - производители поодерживают клиент на пайтон;
#     - API;
#     - легко масштарбируется(вериткально и горизотально);
#     - супер фича - ПОЛНОТЕСТОВЬІЙ поиск;
'''Полнотекстовый поиск'''  # https://ibb.co/7KZvVdG
# Полнотекстовый поиск в отличии от обьчного(шаблон или подстроку) плевать на падежи, времена, опечятки и склонения - он найдет
# все и вьідаст в порядке соответсвия(рлевантности). Поноекстовьій поиск поймет:
#   - Мама мьіла раму;
#   - Мама подраму вьімьіла;
#   - Мамьі мьіли рамьі;
