# 1.1. Текст разюивается на токеньі, но токен, как термин, применим ТОЛЬКО к анализатору.
# В целом общее названи таких штук - термьі (terms)
import webbrowser
webbrowser.open("https://ibb.co/R3rQjDd")
# 1.2. Анализатор рабивает текст на токеньі, потом приводить к нижнему регистру - єто уже термьі,
# которіе будут складьіваеются в память + скажем что бьі они приводились к:
#    - к именительному глаголу;
#    - если гагол, то к инфнитиву
print("-   2. inverted index   -")
# 2.1. Когда Еластикпилит документьі, то он говорит какие термьі содержаться в каком документу.
# В итоге у нас получается таблица - inverted index
webbrowser.open("https://ibb.co/5xQmGZ5")
# 2.2. т.е. из строчки сделали множество_set - мьі полученньіе наши термьі(имен.падеж_инфинитив,ловеркейс) отсортируем
# и на пересечении документа на наличие слов мьі будем проставлять тру или фолс(приствует ли данное слово внутри документа или нет)
# 2.3. Если слово есть документе, то єто тру и возращаем пользователю соответсвующий документ!
# 2.4. Чем больше совпадений УНИКЛЬНЬІХ слов обратного индекса в документе, тем более оно релеватно и на первьіх позициях находится.
# 2.5. На каждое "текстовое поле" строится обратньій индекс. Каждьій обратньій индекс занимает место в памяти.
# Т.е. есть харнения для полного текста - так и есть харнение обратньіх индексов(проивходного списка термов от полного текста).
# 2.6. Поля с (числамми, датам, геоданньіми) хранятся в виде красно-черного дерева или бинарного дерева
print("-   3. Mapping   -")
# 3.1. Mapping - описание структурьі нашего дерева
# 3.2. С помощью маппинга мьі можем указать, какие данньіе будут индексироваться, по какому полю будет производиться поиск и тип самого поля.
# 3.3. Индекс - такая штука, которая позволяет бістро отьіскиваеть данньіе. Простой пример: телефонная книга с упорядочиванньім
# списком имен по алфвиту - через бинарное древо.
# 3.4. Нужно не путать общее понятие индекса(штука, ускоряющая поиск) для СУБД и понятие индекса в єластике(таблица данньіх)











