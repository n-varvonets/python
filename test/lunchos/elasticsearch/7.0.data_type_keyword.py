import webbrowser
"""1.Типьі данньіх"""
# Типьі данньіх - такая сущность в язьіке програмирования, которьіе позволяет нам:
#        - удобно хрнаить каку.-то информацию;
#        - манимпулировать ею.
"""Примерьі типов данньіх(клачисекий общий смьісл):"""
#       - hash map
#       - односвзньій и двусвязньій список
#       - stack and queue
#       - класичский массив
#       - числа, bool, str
#       - binary tree, graph
"""Для чего нам нужньі разньіе типьі? """
# Для решения спецефических задач, к примеру:
#       - для раб отьі с датами(время) - нужен определльій формат, которьій заточенньій
#       под определенную логику обработки;
#       - для математики: мьі врядли будем использовать текстовьій формат
#       - разньіе типьі данньіх занимают в памяти разньій обьем
# Как следствие  - каждьій тип данньіх занимает разное кол-во времени затрат на сортировку, вставку, извлечение и т.д.
"""приведение типов"""
# В процеесе индексирования ЕЛАСТИК пьітается привести тип, содержайщеся в документе, которьій является валидньім
# к маппингу. Если приведение типов не уается, то вьіваливается ошибка.
# Проблема: float to int: int(1.2) -> 1
# Важно понимать, что:
#   - ЕЛАСТИК производит приведние типов
#   - тип которьій содержиться в самом документе и тип с которьім поле в итоге проиндексируется - разньіе вещи
"""_source"""
# _source - єто исходное значение, которое бьіло в документе.
# А для поиска ЕЛАСТИК используется проиндексированньіе значение которьіе хранятся в таблице inverted index
"""решение"""
# приведение типов можно ОТЛКЮЧИТ в Еластике и єто ХОРОШО(без всяких динамических вещей, а ЖЕСТКО задать ожидаемьій тип)
# "coerce": false
"""два вида поиска в еластике"""
# 1.term: ищет по точному  соответсвию значения term-a. Для keyword type полей - лучше всегда использовать term-поиск.
# 2.match: ищет НЕ по точному соответсвию. Вьідает дакументьі в порядке релевантности(совпадения букв
# в значения поля документа)).




