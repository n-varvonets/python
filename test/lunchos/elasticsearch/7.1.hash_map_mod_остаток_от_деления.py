import webbrowser
print("-   1.Хеш-таблица   - ")
# 2.1.Хеш-таблица - структура данньіх, позволяющая бьістро получать информацию по ключу, независимо от кол-ва данньіх.
# 2.2.Где используется?
#       - при построение кєша;
#       - индексьі БД;
#       - язьіковьіе процессьі
# 2.3.Ассоциативньій массив - так же известен как map или словарь(dict() в пайтоне),
# НО как бьі он не назьівлся -  в своей основе использует хеш-таблицьі
# 2.4.а). Проблема: представим что у нас есть таблица или обьічньій массив - справчник(имя и номер
# телефона(для простатьі возьмем два поля)).
# 2.4.б). И в єтой таблице мьі хотим совершать по по ключу(имя). Т.е. по имени человека - находить его номер телфеона.Как єто сделать?
# webbrowser.open("https://ibb.co/ncXm8BB")
# 2.5.Решение_1:
# 2.5.а. Например способом перебора, но єто медленньій способом, осбенно если 10 млн записей существует.
# 2.5.б. А если б знали его id, то находидл практически многвеноо. ПРИ ЄТОМ ЕГО СКОРОСТЬ НЕ ЗАВИСИЛА Б от кол-во єлементов.
# Т.е. поиск осуществлялся б ОДИНАКОВО БЬІСТРО как на 10ти записях, так и на 10 млн.
# 2.5.Решение_2:



print("-    2.а) остаток от деления    -")
print(19 // 5)  # >>> 3 - целочисленное диление - ВАЖНО! секрет: округление ВНИЗ
print(19 / 5)  # >>> 3.8
print(19 % 5)  # >>> 4  : т.е. минимальное число для деления - 15 + "4"
# т.е. искомое число помещается 3 раза, а остаток - вьіводим на екран:
# 19=(5*3) + (4)

# 905 // 6 = 150 # >>>(5*3) + (4)
# 905 / 6 = 150.8333..4 # >>> =(5*3) + (4)
# 905 % 6 = 6 # >>> 905= (150*6) + "5"  # >>> 150*6=900  # >>> 905 = 900 + "5"

print("-    2.б)по такому же секрету работает и отрецательньіе деления    -")
print(19 // -5)  # >>>  -4    не забудь про округление ВНИЗ
print(-905 % 6)  # >>> -150*6=-900 и учитьівая секрет к окрушлению вниз нужен -906, а у нас -905, т.е. ответ 1



