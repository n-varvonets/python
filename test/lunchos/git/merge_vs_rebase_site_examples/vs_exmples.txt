
Согласно официальному руководству Git rebase “повторно применяет коммиты поверх другой базовой
ветки”, тогда как merge “объединяет две или более историй разработки”.

Иначе говоря, основное отличие между ними в том, что слияние сохраняет историю в первозданном виде,
а перебазирование ее перезаписывает.



                                            Слияние
Начнем с самого распространенного рабочего процесса интеграции изменений: слияния.
Перед объединением изменений Ada с feature-2 Satoshi должен сначала обновить свой локальный указатель на master
ветку, поскольку в данный момент она устарела. Как только master и o/master синхронизируются,
Satoshi сможет включить все изменения в свою тематическую ветку.

После всех изменений в feature-2 Satoshi может продолжить разработку ветки и на заключительном этапе объединить ее с master.

Ниже представлен окончательный результат слияния. Как видно, история разработки сохраняет все свои этапы — добавляется только коммит слияния C7.



                                        Перебазирование
Имея в виду процесс слияния, рассмотрим тот же пример, но уже с точки зрения перебазирования. Так же как и в предыдущем
случае, перед интеграцией изменений Satoshi должен убедиться, что его локальная и удаленная ветки master
синхронизированы. Но затем вместо обычного слияния, сохраняющего историю в ее поэтапном виде, он может интегрировать
все изменения с помощью операции перебазирования, таким образом перезаписывая историю.

Выполняя перебазирование feature-2 относительно master, Git вернется назад и повторно выполнит коммиты C5 и C6 один за
другим прямо поверх C4, создавая впечатление, что feature-2 изначально была ответвлением конечных изменений Ada.


Примечание: каждый раз перебазирование ветки будет сопровождаться созданием новых коммитов, даже если их содержимое
останется одним и тем же. Таким образом, прежние коммиты будут в итоге полностью удалены из истории.

                                    Проблема rebase - Опубликованные ветки
Еще одна потенциальная проблема связана с ситуацией, в которой ветка, подлежащая перебазированию, уже удаленно
опубликована и положена в основу чьей-либо работы.

                                        Главные правила перебазирования
Во избежание связанных с перебазированием проблем рекомендуется придерживаться следующих правил:
            - Не перебазируйте ветку, опубликованную удаленно…
            - …если только вы не уверены, что кроме вас с ней никто не работает (и что ее принудительная публикация не вызовет проблем).
            - Создайте резервную ветку, исходящую из конечной точки ветки, подлежащей перебазированию. Это позволит
             легко сравнить результат (по завершении) и при необходимости вернуться к состоянию, предшествующему перебазированию.

                                            Заключение
Многие разработчики предпочитают вместо rebase выполнять merge, поскольку они уверены, что так не потеряют результаты своей работы.