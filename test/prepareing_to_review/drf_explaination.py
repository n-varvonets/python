# RESTdjango предоставляет класс APIView, который является подклассом джанговского View. Главным отличием является:
# - запросы будут экземплярами Request REST framework, а не HttpRequest;
# - ответы будут Response REST framework, место джанговских HttpResponse.
# 1)На первом уровне представлений идут, как и в джанго, функции (FunctionBasedView) для отображения простых запросов(как в  \
# первом уроке), но уже с помощью декоратора @api_view(). умолчанию он использует только метод представляени get().
# 2)GenericAPIView - расширяет класс APIView, реализуя часто повторяющееся поведение. Т.е. если наше представление подходит
# под стандартный шаблон, тогда используем Generic, а если что-то свое инивидуальное, то APIView(как чистый лист бумаги) и
# прописываем всю ту логику, которая нам нужна.
# 3.0) ViewSet - переводится как набор представлений(CRUD), т.е. обьеденения представлений в один класс. Вместо того что бы
# использовать 4 разных представления для одного обьекта(ресурса(юзер, погода, предмет)), мы можем поместить их в один класс.
# Т.е. к пример умы будем работать с одним классом Пользователь, который умеет и создавать, удалять, изменять и выводить всех
# пользователей. ВАЖНОЖ:!!! ViewSet - вместо того что работать с методами(.get() или .post()), мы - будем работать с \
# действиями(.list(), .create(), .retrieve(), update(), destroy()). ViewSet наследуется от APIView -> Veiw.
# 3.1) Есть так же класс GenericViewSet, который наследуется от (GenericAPIView) и предоставляет набор методов get_queryset(), \
# get_object() и другие, при это не реализует их.(нам надо прописать их самим).
# 3.2) Что бы использовать GenericViewSet нам нужно создать миксин, а потом уже наследовать от него
# 3.3) ModelViewSet наследуется(как и GenericViewSet) от GenericAPIView совмещая функционал различных миксинов.
#
# Представления GenericAPIView:
# 1)CreateAPIView:
# - Используется: для создания конечных точек(наших объектов/записей)
# - Предоставляет: обработчик метода post()
# - Расширяет: GenericAPIView, CreateModelMixin
# 2)ListAPIView:
# - Используется: что бы вытянуть список всех элементов нашей таблицы(модели/объекта) в бд
# - Предоставляет: обработчик метода get()
# - Расширяет: GenericAPIView, ListModelMixin
# 3)RetrieveAPIView:
# - Используется: для получение одного объекта/записи
# - Предоставляет: обработчик метода get()
# - Расширяет: GenericAPIView, RetrieveModelMixin
# 4)DestroyAPIView:
# - Используется: для удаления одного объекта/записи
# - Предоставляет: обработчик метода delete()
# - Расширяет: GenericAPIView, DestroyModelMixin
# 5)UpdateAPIView:
# - Используется: для обновления одного объекта/записи
# - Предоставляет: обработчик метода put() и patch()
# - Расширяет: GenericAPIView, UpdateModelMixin
#
# 6+)ListCreateAPIView:
# - Используется: когда нам необходимо - создать или получить набор наших элементов
# - Предоставляет: обработчик метода get() и post()
# - Расширяет: GenericAPIView, ListModelMixin, CreateModelMixin
# 7+)RetrieveUpdateCreateAPIView:
# - Используется: для чтения или обновления экземпляров нашей модели
# - Предоставляет: обработчик метода get() и put(), patch()
# - Расширяет: GenericAPIView, RetrieveModelMixin, UpdateModelMixin
# 8+)RetrieveDestroyACreateAPIView:
# - Используется: для чтения или удаления экземпляров(конечных точек) нашей модели
# - Предоставляет: обработчик метода get() и delete()
# - Расширяет: GenericAPIView, RetrieveModelMixin, DestroyModelMixin
# 8+)RetrieveUpdateDestroyACreateAPIView:
# - Используется: для чтения, обновления или удаления экземпляров нашей модели
# - Предоставляет: обработчик метода get(), put(), patch() и delete()
# - Расширяет: GenericAPIView, RetrieveModelMixin, UpdateModelMixin, DestroyModelMixin

